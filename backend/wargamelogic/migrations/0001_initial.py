# Generated by Django 5.2.6 on 2025-09-22 14:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'branches',
            },
        ),
        migrations.CreateModel(
            name='GameInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_code', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_started', models.BooleanField(default=False)),
                ('turn', models.IntegerField(default=0)),
                ('turn_finish_time', models.BigIntegerField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Landmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('City', 'City'), ('Port', 'Port'), ('Ground Base', 'Ground Base'), ('Airfield', 'Airfield'), ('Supply Node', 'Supply Node'), ('Stockpile', 'Stockpile')], max_length=100, unique=True)),
                ('max_victory_points', models.FloatField()),
                ('can_repair', models.BooleanField()),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('cost', models.FloatField()),
                ('domain', models.CharField(choices=[('Ground', 'Ground'), ('Air', 'Air'), ('Sea', 'Sea')], max_length=20)),
                ('is_logistic', models.BooleanField()),
                ('type', models.CharField(choices=[('Light', 'Light'), ('Medium', 'Medium'), ('Heavy', 'Heavy'), ('Structure', 'Structure')], max_length=20)),
                ('speed', models.FloatField()),
                ('max_health', models.FloatField()),
                ('max_supply_points', models.FloatField()),
                ('defense_modifier', models.FloatField()),
                ('icon', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_chief_of_staff', models.BooleanField(default=False)),
                ('is_commander', models.BooleanField(default=False)),
                ('is_vice_commander', models.BooleanField(default=False)),
                ('is_operations', models.BooleanField(default=False)),
                ('is_logistics', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.branch')),
            ],
        ),
        migrations.CreateModel(
            name='TeamInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('victory_points', models.FloatField(default=0)),
                ('game_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.gameinstance')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.team')),
            ],
        ),
        migrations.CreateModel(
            name='RoleInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ready', models.BooleanField(default=False)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.teaminstance')),
            ],
        ),
        migrations.CreateModel(
            name='LandmarkInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('victory_points', models.FloatField()),
                ('game_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.gameinstance')),
                ('landmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.landmark')),
                ('team_instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.teaminstance')),
            ],
        ),
        migrations.CreateModel(
            name='TeamInstanceRolePoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supply_points', models.FloatField(default=0)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.role')),
                ('team_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.teaminstance')),
            ],
            options={
                'verbose_name_plural': 'team instance role points',
            },
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField()),
                ('column', models.IntegerField()),
                ('terrain', models.CharField(choices=[('Ocean', 'Ocean'), ('Forest', 'Forest'), ('Jungle/Swamp', 'Jungle/Swamp'), ('Plains/Grasslands', 'Plains/Grasslands'), ('Mountain', 'Mountain'), ('Desert', 'Desert'), ('Urban', 'Urban'), ('Road', 'Road')], max_length=30)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('row', 'column'), name='unique_row_column_pair')],
            },
        ),
        migrations.CreateModel(
            name='LandmarkInstanceTile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('landmark_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.landmarkinstance')),
                ('tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.tile')),
            ],
        ),
        migrations.CreateModel(
            name='Attack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('cost', models.FloatField()),
                ('to_hit', models.FloatField()),
                ('shots', models.IntegerField()),
                ('min_damage', models.FloatField()),
                ('max_damage', models.FloatField()),
                ('range', models.FloatField()),
                ('type', models.CharField(choices=[('Light', 'Light'), ('Medium', 'Medium'), ('Heavy', 'Heavy'), ('Structure', 'Structure')], max_length=20)),
                ('attack_modifier', models.FloatField()),
                ('attack_modifier_applies_to', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attacks', to='wargamelogic.unit')),
            ],
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='wargamelogic.unit')),
            ],
            options={
                'verbose_name_plural': 'abilities',
            },
        ),
        migrations.CreateModel(
            name='UnitBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.branch')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.unit')),
            ],
            options={
                'verbose_name_plural': 'unit branches',
            },
        ),
        migrations.AddField(
            model_name='unit',
            name='branches',
            field=models.ManyToManyField(through='wargamelogic.UnitBranch', to='wargamelogic.branch'),
        ),
        migrations.CreateModel(
            name='UnitInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health', models.FloatField()),
                ('supply_points', models.FloatField()),
                ('team_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.teaminstance')),
                ('tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.tile')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wargamelogic.unit')),
            ],
        ),
        migrations.AddConstraint(
            model_name='teaminstance',
            constraint=models.UniqueConstraint(fields=('game_instance', 'team'), name='unique_game_team_pair'),
        ),
        migrations.AddConstraint(
            model_name='roleinstance',
            constraint=models.UniqueConstraint(fields=('user', 'team_instance'), name='unique_user_team_instance_pair'),
        ),
        migrations.AddConstraint(
            model_name='teaminstancerolepoints',
            constraint=models.UniqueConstraint(fields=('team_instance', 'role'), name='unique_team_instance_role_pair'),
        ),
        migrations.AddConstraint(
            model_name='landmarkinstancetile',
            constraint=models.UniqueConstraint(fields=('tile', 'landmark_instance'), name='unique_tile_landmark_pair'),
        ),
        migrations.AddConstraint(
            model_name='attack',
            constraint=models.UniqueConstraint(fields=('unit', 'name'), name='unique_unit_attack_pair'),
        ),
        migrations.AddConstraint(
            model_name='ability',
            constraint=models.UniqueConstraint(fields=('unit', 'name'), name='unique_unit_ability_pair'),
        ),
        migrations.AddConstraint(
            model_name='unitbranch',
            constraint=models.UniqueConstraint(fields=('unit', 'branch'), name='unique_unit_branch'),
        ),
    ]
